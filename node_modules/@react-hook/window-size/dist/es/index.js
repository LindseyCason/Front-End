import React from 'react'
const {useEffect} = React
import useDebounce from '@react-hook/debounce'
const emptyArr = []
const emptyObj = {}

const useSizeHook = (dim, initialValue, options = emptyObj) => {
  const {wait, leading} = options
  const [size, setDebouncedSize] = useDebounce(
    typeof document === 'undefined'
      ? initialValue
      : document.documentElement[dim],
    wait,
    leading
  )

  function _ref() {
    return setDebouncedSize(document.documentElement[dim])
  }

  useEffect(() => {
    const setSize = _ref
    window.addEventListener('resize', setSize)
    window.addEventListener('orientationchange', setSize)
    return () => {
      window.removeEventListener('resize', setSize)
      window.removeEventListener('orientationchange', setSize)
    }
  }, emptyArr)
  return size
}

export const useWindowHeight = (initialValue = 0, options) =>
  useSizeHook('clientHeight', initialValue, options)
export const useWindowWidth = (initialValue = 0, options) =>
  useSizeHook('clientWidth', initialValue, options)
export const useWindowSize = (initialWidth, initialHeight, options) => [
  useWindowWidth(initialWidth, options),
  useWindowHeight(initialHeight, options),
]
export default useWindowSize
